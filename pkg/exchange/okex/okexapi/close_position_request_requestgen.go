// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Data -url /api/v5/trade/close-position -type ClosePositionRequest -responseDataType []ClosePositionResponse"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (c *ClosePositionRequest) InstrumentID(instrumentID string) *ClosePositionRequest {
	c.instrumentID = instrumentID
	return c
}

func (c *ClosePositionRequest) PosSide(posSide string) *ClosePositionRequest {
	c.posSide = &posSide
	return c
}

func (c *ClosePositionRequest) MarginMode(marginMode string) *ClosePositionRequest {
	c.marginMode = marginMode
	return c
}

func (c *ClosePositionRequest) Ccy(ccy string) *ClosePositionRequest {
	c.ccy = &ccy
	return c
}

func (c *ClosePositionRequest) AutoCxl(autoCxl bool) *ClosePositionRequest {
	c.autoCxl = autoCxl
	return c
}

func (c *ClosePositionRequest) ClOrdId(clOrdId string) *ClosePositionRequest {
	c.clOrdId = &clOrdId
	return c
}

func (c *ClosePositionRequest) Tag(tag string) *ClosePositionRequest {
	c.tag = &tag
	return c
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (c *ClosePositionRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (c *ClosePositionRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check instrumentID field -> json key instId
	instrumentID := c.instrumentID

	// assign parameter of instrumentID
	params["instId"] = instrumentID
	// check posSide field -> json key posSide
	if c.posSide != nil {
		posSide := *c.posSide

		// assign parameter of posSide
		params["posSide"] = posSide
	} else {
	}
	// check marginMode field -> json key mgnMode
	marginMode := c.marginMode

	// assign parameter of marginMode
	params["mgnMode"] = marginMode
	// check ccy field -> json key ccy
	if c.ccy != nil {
		ccy := *c.ccy

		// assign parameter of ccy
		params["ccy"] = ccy
	} else {
	}
	// check autoCxl field -> json key autoCxl
	autoCxl := c.autoCxl

	// assign parameter of autoCxl
	params["autoCxl"] = autoCxl
	// check clOrdId field -> json key clOrdId
	if c.clOrdId != nil {
		clOrdId := *c.clOrdId

		// assign parameter of clOrdId
		params["clOrdId"] = clOrdId
	} else {
	}
	// check tag field -> json key tag
	if c.tag != nil {
		tag := *c.tag

		// assign parameter of tag
		params["tag"] = tag
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (c *ClosePositionRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := c.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if c.isVarSlice(_v) {
			c.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (c *ClosePositionRequest) GetParametersJSON() ([]byte, error) {
	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (c *ClosePositionRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (c *ClosePositionRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (c *ClosePositionRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (c *ClosePositionRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (c *ClosePositionRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := c.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (c *ClosePositionRequest) GetPath() string {
	return "/api/v5/trade/close-position"
}

// Do generates the request object and send the request object to the API endpoint
func (c *ClosePositionRequest) Do(ctx context.Context) ([]ClosePositionResponse, error) {

	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = c.GetPath()

	req, err := c.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := c.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	var data []ClosePositionResponse
	if err := json.Unmarshal(apiResponse.Data, &data); err != nil {
		return nil, err
	}
	return data, nil
}
