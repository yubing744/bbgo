// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Data -url /api/v5/trade/order -type PlaceOrderRequest -responseDataType []OrderResponse"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (p *PlaceOrderRequest) InstrumentID(instrumentID string) *PlaceOrderRequest {
	p.instrumentID = instrumentID
	return p
}

func (p *PlaceOrderRequest) TradeMode(tradeMode TradeMode) *PlaceOrderRequest {
	p.tradeMode = tradeMode
	return p
}

func (p *PlaceOrderRequest) MarginCurrency(marginCurrency string) *PlaceOrderRequest {
	p.marginCurrency = &marginCurrency
	return p
}

func (p *PlaceOrderRequest) ClientOrderID(clientOrderID string) *PlaceOrderRequest {
	p.clientOrderID = &clientOrderID
	return p
}

func (p *PlaceOrderRequest) Tag(tag string) *PlaceOrderRequest {
	p.tag = &tag
	return p
}

func (p *PlaceOrderRequest) Side(side SideType) *PlaceOrderRequest {
	p.side = side
	return p
}

func (p *PlaceOrderRequest) PositionSide(positionSide string) *PlaceOrderRequest {
	p.positionSide = &positionSide
	return p
}

func (p *PlaceOrderRequest) OrderType(orderType OrderType) *PlaceOrderRequest {
	p.orderType = orderType
	return p
}

func (p *PlaceOrderRequest) Size(size string) *PlaceOrderRequest {
	p.size = size
	return p
}

func (p *PlaceOrderRequest) Price(price string) *PlaceOrderRequest {
	p.price = &price
	return p
}

func (p *PlaceOrderRequest) TakeProfitTriggerPx(takeProfitTriggerPx string) *PlaceOrderRequest {
	p.takeProfitTriggerPx = &takeProfitTriggerPx
	return p
}

func (p *PlaceOrderRequest) TakeProfitOrdPx(takeProfitOrdPx string) *PlaceOrderRequest {
	p.takeProfitOrdPx = &takeProfitOrdPx
	return p
}

func (p *PlaceOrderRequest) TakeProfitTriggerPxType(takeProfitTriggerPxType string) *PlaceOrderRequest {
	p.takeProfitTriggerPxType = &takeProfitTriggerPxType
	return p
}

func (p *PlaceOrderRequest) StopLossTriggerPx(stopLossTriggerPx string) *PlaceOrderRequest {
	p.stopLossTriggerPx = &stopLossTriggerPx
	return p
}

func (p *PlaceOrderRequest) StopLossOrdPx(stopLossOrdPx string) *PlaceOrderRequest {
	p.stopLossOrdPx = &stopLossOrdPx
	return p
}

func (p *PlaceOrderRequest) StopLossTriggerPxType(stopLossTriggerPxType string) *PlaceOrderRequest {
	p.stopLossTriggerPxType = &stopLossTriggerPxType
	return p
}

func (p *PlaceOrderRequest) TargetCurrency(targetCurrency TargetCurrency) *PlaceOrderRequest {
	p.targetCurrency = &targetCurrency
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PlaceOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PlaceOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check instrumentID field -> json key instId
	instrumentID := p.instrumentID

	// assign parameter of instrumentID
	params["instId"] = instrumentID
	// check tradeMode field -> json key tdMode
	tradeMode := p.tradeMode

	// TEMPLATE check-valid-values
	switch tradeMode {
	case "cross", "isolated", "cash":
		params["tdMode"] = tradeMode

	default:
		return nil, fmt.Errorf("tdMode value %v is invalid", tradeMode)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of tradeMode
	params["tdMode"] = tradeMode
	// check marginCurrency field -> json key ccy
	if p.marginCurrency != nil {
		marginCurrency := *p.marginCurrency

		// assign parameter of marginCurrency
		params["ccy"] = marginCurrency
	} else {
	}
	// check clientOrderID field -> json key clOrdId
	if p.clientOrderID != nil {
		clientOrderID := *p.clientOrderID

		// assign parameter of clientOrderID
		params["clOrdId"] = clientOrderID
	} else {
	}
	// check tag field -> json key tag
	if p.tag != nil {
		tag := *p.tag

		// assign parameter of tag
		params["tag"] = tag
	} else {
	}
	// check side field -> json key side
	side := p.side

	// TEMPLATE check-valid-values
	switch side {
	case "buy", "sell":
		params["side"] = side

	default:
		return nil, fmt.Errorf("side value %v is invalid", side)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of side
	params["side"] = side
	// check positionSide field -> json key posSide
	if p.positionSide != nil {
		positionSide := *p.positionSide

		// assign parameter of positionSide
		params["posSide"] = positionSide
	} else {
	}
	// check orderType field -> json key ordType
	orderType := p.orderType

	// TEMPLATE check-valid-values
	switch orderType {
	case OrderTypeMarket, OrderTypeLimit, OrderTypePostOnly, OrderTypeFOK, OrderTypeIOC:
		params["ordType"] = orderType

	default:
		return nil, fmt.Errorf("ordType value %v is invalid", orderType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of orderType
	params["ordType"] = orderType
	// check size field -> json key sz
	size := p.size

	// assign parameter of size
	params["sz"] = size
	// check price field -> json key px
	if p.price != nil {
		price := *p.price

		// assign parameter of price
		params["px"] = price
	} else {
	}
	// check takeProfitTriggerPx field -> json key tpTriggerPx
	if p.takeProfitTriggerPx != nil {
		takeProfitTriggerPx := *p.takeProfitTriggerPx

		// assign parameter of takeProfitTriggerPx
		params["tpTriggerPx"] = takeProfitTriggerPx
	} else {
	}
	// check takeProfitOrdPx field -> json key tpOrdPx
	if p.takeProfitOrdPx != nil {
		takeProfitOrdPx := *p.takeProfitOrdPx

		// assign parameter of takeProfitOrdPx
		params["tpOrdPx"] = takeProfitOrdPx
	} else {
	}
	// check takeProfitTriggerPxType field -> json key tpOrdPx
	if p.takeProfitTriggerPxType != nil {
		takeProfitTriggerPxType := *p.takeProfitTriggerPxType

		// assign parameter of takeProfitTriggerPxType
		params["tpOrdPx"] = takeProfitTriggerPxType
	} else {
	}
	// check stopLossTriggerPx field -> json key slTriggerPx
	if p.stopLossTriggerPx != nil {
		stopLossTriggerPx := *p.stopLossTriggerPx

		// assign parameter of stopLossTriggerPx
		params["slTriggerPx"] = stopLossTriggerPx
	} else {
	}
	// check stopLossOrdPx field -> json key slOrdPx
	if p.stopLossOrdPx != nil {
		stopLossOrdPx := *p.stopLossOrdPx

		// assign parameter of stopLossOrdPx
		params["slOrdPx"] = stopLossOrdPx
	} else {
	}
	// check stopLossTriggerPxType field -> json key slTriggerPxType
	if p.stopLossTriggerPxType != nil {
		stopLossTriggerPxType := *p.stopLossTriggerPxType

		// assign parameter of stopLossTriggerPxType
		params["slTriggerPxType"] = stopLossTriggerPxType
	} else {
	}
	// check targetCurrency field -> json key tgtCcy
	if p.targetCurrency != nil {
		targetCurrency := *p.targetCurrency

		// TEMPLATE check-valid-values
		switch targetCurrency {
		case "quote_ccy", "base_ccy":
			params["tgtCcy"] = targetCurrency

		default:
			return nil, fmt.Errorf("tgtCcy value %v is invalid", targetCurrency)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of targetCurrency
		params["tgtCcy"] = targetCurrency
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PlaceOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PlaceOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PlaceOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PlaceOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PlaceOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PlaceOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PlaceOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (p *PlaceOrderRequest) GetPath() string {
	return "/api/v5/trade/order"
}

// Do generates the request object and send the request object to the API endpoint
func (p *PlaceOrderRequest) Do(ctx context.Context) ([]OrderResponse, error) {

	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = p.GetPath()

	req, err := p.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	var data []OrderResponse
	if err := json.Unmarshal(apiResponse.Data, &data); err != nil {
		return nil, err
	}
	return data, nil
}
