// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Data -url /api/v5/trade/order-algo -type PlaceAlgoOrderRequest -responseType .PlaceAlgoOrderResponse"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (p *PlaceAlgoOrderRequest) InstID(instID string) *PlaceAlgoOrderRequest {
	p.instID = instID
	return p
}

func (p *PlaceAlgoOrderRequest) TdMode(tdMode TradeMode) *PlaceAlgoOrderRequest {
	p.tdMode = tdMode
	return p
}

func (p *PlaceAlgoOrderRequest) Ccy(ccy string) *PlaceAlgoOrderRequest {
	p.ccy = &ccy
	return p
}

func (p *PlaceAlgoOrderRequest) Side(side string) *PlaceAlgoOrderRequest {
	p.side = side
	return p
}

func (p *PlaceAlgoOrderRequest) PosSide(posSide string) *PlaceAlgoOrderRequest {
	p.posSide = &posSide
	return p
}

func (p *PlaceAlgoOrderRequest) OrdType(ordType AlgoOrderType) *PlaceAlgoOrderRequest {
	p.ordType = ordType
	return p
}

func (p *PlaceAlgoOrderRequest) Sz(sz string) *PlaceAlgoOrderRequest {
	p.sz = &sz
	return p
}

func (p *PlaceAlgoOrderRequest) Tag(tag string) *PlaceAlgoOrderRequest {
	p.tag = &tag
	return p
}

func (p *PlaceAlgoOrderRequest) TgtCcy(tgtCcy string) *PlaceAlgoOrderRequest {
	p.tgtCcy = &tgtCcy
	return p
}

func (p *PlaceAlgoOrderRequest) AlgoClOrdId(algoClOrdId string) *PlaceAlgoOrderRequest {
	p.algoClOrdId = &algoClOrdId
	return p
}

func (p *PlaceAlgoOrderRequest) CloseFraction(closeFraction string) *PlaceAlgoOrderRequest {
	p.closeFraction = &closeFraction
	return p
}

func (p *PlaceAlgoOrderRequest) TpTriggerPx(tpTriggerPx string) *PlaceAlgoOrderRequest {
	p.tpTriggerPx = &tpTriggerPx
	return p
}

func (p *PlaceAlgoOrderRequest) TpTriggerPxType(tpTriggerPxType string) *PlaceAlgoOrderRequest {
	p.tpTriggerPxType = &tpTriggerPxType
	return p
}

func (p *PlaceAlgoOrderRequest) TpOrdPx(tpOrdPx string) *PlaceAlgoOrderRequest {
	p.tpOrdPx = &tpOrdPx
	return p
}

func (p *PlaceAlgoOrderRequest) TpOrdKind(tpOrdKind string) *PlaceAlgoOrderRequest {
	p.tpOrdKind = &tpOrdKind
	return p
}

func (p *PlaceAlgoOrderRequest) SlTriggerPx(slTriggerPx string) *PlaceAlgoOrderRequest {
	p.slTriggerPx = &slTriggerPx
	return p
}

func (p *PlaceAlgoOrderRequest) SlTriggerPxType(slTriggerPxType string) *PlaceAlgoOrderRequest {
	p.slTriggerPxType = &slTriggerPxType
	return p
}

func (p *PlaceAlgoOrderRequest) SlOrdPx(slOrdPx string) *PlaceAlgoOrderRequest {
	p.slOrdPx = &slOrdPx
	return p
}

func (p *PlaceAlgoOrderRequest) CxlOnClosePos(cxlOnClosePos bool) *PlaceAlgoOrderRequest {
	p.cxlOnClosePos = &cxlOnClosePos
	return p
}

func (p *PlaceAlgoOrderRequest) ReduceOnly(reduceOnly bool) *PlaceAlgoOrderRequest {
	p.reduceOnly = &reduceOnly
	return p
}

func (p *PlaceAlgoOrderRequest) QuickMgnType(quickMgnType string) *PlaceAlgoOrderRequest {
	p.quickMgnType = &quickMgnType
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PlaceAlgoOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PlaceAlgoOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check instID field -> json key instId
	instID := p.instID

	// assign parameter of instID
	params["instId"] = instID
	// check tdMode field -> json key tdMode
	tdMode := p.tdMode

	// TEMPLATE check-valid-values
	switch tdMode {
	case "cross", "isolated", "cash":
		params["tdMode"] = tdMode

	default:
		return nil, fmt.Errorf("tdMode value %v is invalid", tdMode)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of tdMode
	params["tdMode"] = tdMode
	// check ccy field -> json key ccy
	if p.ccy != nil {
		ccy := *p.ccy

		// assign parameter of ccy
		params["ccy"] = ccy
	} else {
	}
	// check side field -> json key side
	side := p.side

	// TEMPLATE check-valid-values
	switch side {
	case "buy", "sell":
		params["side"] = side

	default:
		return nil, fmt.Errorf("side value %v is invalid", side)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of side
	params["side"] = side
	// check posSide field -> json key posSide
	if p.posSide != nil {
		posSide := *p.posSide

		// assign parameter of posSide
		params["posSide"] = posSide
	} else {
	}
	// check ordType field -> json key ordType
	ordType := p.ordType

	// TEMPLATE check-valid-values
	switch ordType {
	case AlgoOrderTypeConditional, AlgoOrderTypeOCO, AlgoOrderTypeTrigger, AlgoOrderTypeMoveOrderStop, AlgoOrderTypeIceberg, AlgoOrderTypeTWAP:
		params["ordType"] = ordType

	default:
		return nil, fmt.Errorf("ordType value %v is invalid", ordType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of ordType
	params["ordType"] = ordType
	// check sz field -> json key sz
	if p.sz != nil {
		sz := *p.sz

		// assign parameter of sz
		params["sz"] = sz
	} else {
	}
	// check tag field -> json key tag
	if p.tag != nil {
		tag := *p.tag

		// assign parameter of tag
		params["tag"] = tag
	} else {
	}
	// check tgtCcy field -> json key tgtCcy
	if p.tgtCcy != nil {
		tgtCcy := *p.tgtCcy

		// assign parameter of tgtCcy
		params["tgtCcy"] = tgtCcy
	} else {
	}
	// check algoClOrdId field -> json key algoClOrdId
	if p.algoClOrdId != nil {
		algoClOrdId := *p.algoClOrdId

		// assign parameter of algoClOrdId
		params["algoClOrdId"] = algoClOrdId
	} else {
	}
	// check closeFraction field -> json key closeFraction
	if p.closeFraction != nil {
		closeFraction := *p.closeFraction

		// assign parameter of closeFraction
		params["closeFraction"] = closeFraction
	} else {
	}
	// check tpTriggerPx field -> json key tpTriggerPx
	if p.tpTriggerPx != nil {
		tpTriggerPx := *p.tpTriggerPx

		// assign parameter of tpTriggerPx
		params["tpTriggerPx"] = tpTriggerPx
	} else {
	}
	// check tpTriggerPxType field -> json key tpTriggerPxType
	if p.tpTriggerPxType != nil {
		tpTriggerPxType := *p.tpTriggerPxType

		// assign parameter of tpTriggerPxType
		params["tpTriggerPxType"] = tpTriggerPxType
	} else {
	}
	// check tpOrdPx field -> json key tpOrdPx
	if p.tpOrdPx != nil {
		tpOrdPx := *p.tpOrdPx

		// assign parameter of tpOrdPx
		params["tpOrdPx"] = tpOrdPx
	} else {
	}
	// check tpOrdKind field -> json key tpOrdKind
	if p.tpOrdKind != nil {
		tpOrdKind := *p.tpOrdKind

		// assign parameter of tpOrdKind
		params["tpOrdKind"] = tpOrdKind
	} else {
	}
	// check slTriggerPx field -> json key slTriggerPx
	if p.slTriggerPx != nil {
		slTriggerPx := *p.slTriggerPx

		// assign parameter of slTriggerPx
		params["slTriggerPx"] = slTriggerPx
	} else {
	}
	// check slTriggerPxType field -> json key slTriggerPxType
	if p.slTriggerPxType != nil {
		slTriggerPxType := *p.slTriggerPxType

		// assign parameter of slTriggerPxType
		params["slTriggerPxType"] = slTriggerPxType
	} else {
	}
	// check slOrdPx field -> json key slOrdPx
	if p.slOrdPx != nil {
		slOrdPx := *p.slOrdPx

		// assign parameter of slOrdPx
		params["slOrdPx"] = slOrdPx
	} else {
	}
	// check cxlOnClosePos field -> json key cxlOnClosePos
	if p.cxlOnClosePos != nil {
		cxlOnClosePos := *p.cxlOnClosePos

		// assign parameter of cxlOnClosePos
		params["cxlOnClosePos"] = cxlOnClosePos
	} else {
	}
	// check reduceOnly field -> json key reduceOnly
	if p.reduceOnly != nil {
		reduceOnly := *p.reduceOnly

		// assign parameter of reduceOnly
		params["reduceOnly"] = reduceOnly
	} else {
	}
	// check quickMgnType field -> json key quickMgnType
	if p.quickMgnType != nil {
		quickMgnType := *p.quickMgnType

		// assign parameter of quickMgnType
		params["quickMgnType"] = quickMgnType
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PlaceAlgoOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PlaceAlgoOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PlaceAlgoOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PlaceAlgoOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PlaceAlgoOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PlaceAlgoOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PlaceAlgoOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (p *PlaceAlgoOrderRequest) GetPath() string {
	return "/api/v5/trade/order-algo"
}

// Do generates the request object and send the request object to the API endpoint
func (p *PlaceAlgoOrderRequest) Do(ctx context.Context) (*PlaceAlgoOrderResponse, error) {

	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = p.GetPath()

	req, err := p.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse PlaceAlgoOrderResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
