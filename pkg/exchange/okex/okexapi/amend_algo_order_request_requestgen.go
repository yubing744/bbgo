// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Data -url /api/v5/trade/amend-algos -type AmendAlgoOrderRequest -responseDataType []AmendAlgoOrder"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (a *AmendAlgoOrderRequest) InstID(instID string) *AmendAlgoOrderRequest {
	a.instID = instID
	return a
}

func (a *AmendAlgoOrderRequest) AlgoID(algoID string) *AmendAlgoOrderRequest {
	a.algoID = &algoID
	return a
}

func (a *AmendAlgoOrderRequest) AlgoClOrdID(algoClOrdID string) *AmendAlgoOrderRequest {
	a.algoClOrdID = &algoClOrdID
	return a
}

func (a *AmendAlgoOrderRequest) CxlOnFail(cxlOnFail bool) *AmendAlgoOrderRequest {
	a.cxlOnFail = &cxlOnFail
	return a
}

func (a *AmendAlgoOrderRequest) ReqID(reqID string) *AmendAlgoOrderRequest {
	a.reqID = &reqID
	return a
}

func (a *AmendAlgoOrderRequest) NewSz(newSz string) *AmendAlgoOrderRequest {
	a.newSz = &newSz
	return a
}

func (a *AmendAlgoOrderRequest) NewTpTriggerPx(newTpTriggerPx string) *AmendAlgoOrderRequest {
	a.newTpTriggerPx = &newTpTriggerPx
	return a
}

func (a *AmendAlgoOrderRequest) NewTpOrdPx(newTpOrdPx string) *AmendAlgoOrderRequest {
	a.newTpOrdPx = &newTpOrdPx
	return a
}

func (a *AmendAlgoOrderRequest) NewSlTriggerPx(newSlTriggerPx string) *AmendAlgoOrderRequest {
	a.newSlTriggerPx = &newSlTriggerPx
	return a
}

func (a *AmendAlgoOrderRequest) NewSlOrdPx(newSlOrdPx string) *AmendAlgoOrderRequest {
	a.newSlOrdPx = &newSlOrdPx
	return a
}

func (a *AmendAlgoOrderRequest) NewTpTriggerPxType(newTpTriggerPxType string) *AmendAlgoOrderRequest {
	a.newTpTriggerPxType = &newTpTriggerPxType
	return a
}

func (a *AmendAlgoOrderRequest) NewSlTriggerPxType(newSlTriggerPxType string) *AmendAlgoOrderRequest {
	a.newSlTriggerPxType = &newSlTriggerPxType
	return a
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (a *AmendAlgoOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (a *AmendAlgoOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check instID field -> json key instId
	instID := a.instID

	// assign parameter of instID
	params["instId"] = instID
	// check algoID field -> json key algoId
	if a.algoID != nil {
		algoID := *a.algoID

		// assign parameter of algoID
		params["algoId"] = algoID
	} else {
	}
	// check algoClOrdID field -> json key algoClOrdId
	if a.algoClOrdID != nil {
		algoClOrdID := *a.algoClOrdID

		// assign parameter of algoClOrdID
		params["algoClOrdId"] = algoClOrdID
	} else {
	}
	// check cxlOnFail field -> json key cxlOnFail
	if a.cxlOnFail != nil {
		cxlOnFail := *a.cxlOnFail

		// assign parameter of cxlOnFail
		params["cxlOnFail"] = cxlOnFail
	} else {
	}
	// check reqID field -> json key reqId
	if a.reqID != nil {
		reqID := *a.reqID

		// assign parameter of reqID
		params["reqId"] = reqID
	} else {
	}
	// check newSz field -> json key newSz
	if a.newSz != nil {
		newSz := *a.newSz

		// assign parameter of newSz
		params["newSz"] = newSz
	} else {
	}
	// check newTpTriggerPx field -> json key newTpTriggerPx
	if a.newTpTriggerPx != nil {
		newTpTriggerPx := *a.newTpTriggerPx

		// assign parameter of newTpTriggerPx
		params["newTpTriggerPx"] = newTpTriggerPx
	} else {
	}
	// check newTpOrdPx field -> json key newTpOrdPx
	if a.newTpOrdPx != nil {
		newTpOrdPx := *a.newTpOrdPx

		// assign parameter of newTpOrdPx
		params["newTpOrdPx"] = newTpOrdPx
	} else {
	}
	// check newSlTriggerPx field -> json key newSlTriggerPx
	if a.newSlTriggerPx != nil {
		newSlTriggerPx := *a.newSlTriggerPx

		// assign parameter of newSlTriggerPx
		params["newSlTriggerPx"] = newSlTriggerPx
	} else {
	}
	// check newSlOrdPx field -> json key newSlOrdPx
	if a.newSlOrdPx != nil {
		newSlOrdPx := *a.newSlOrdPx

		// assign parameter of newSlOrdPx
		params["newSlOrdPx"] = newSlOrdPx
	} else {
	}
	// check newTpTriggerPxType field -> json key newTpTriggerPxType
	if a.newTpTriggerPxType != nil {
		newTpTriggerPxType := *a.newTpTriggerPxType

		// assign parameter of newTpTriggerPxType
		params["newTpTriggerPxType"] = newTpTriggerPxType
	} else {
	}
	// check newSlTriggerPxType field -> json key newSlTriggerPxType
	if a.newSlTriggerPxType != nil {
		newSlTriggerPxType := *a.newSlTriggerPxType

		// assign parameter of newSlTriggerPxType
		params["newSlTriggerPxType"] = newSlTriggerPxType
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (a *AmendAlgoOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := a.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if a.isVarSlice(_v) {
			a.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (a *AmendAlgoOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := a.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (a *AmendAlgoOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (a *AmendAlgoOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (a *AmendAlgoOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (a *AmendAlgoOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (a *AmendAlgoOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := a.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (a *AmendAlgoOrderRequest) GetPath() string {
	return "/api/v5/trade/amend-algos"
}

// Do generates the request object and send the request object to the API endpoint
func (a *AmendAlgoOrderRequest) Do(ctx context.Context) ([]AmendAlgoOrder, error) {

	params, err := a.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = a.GetPath()

	req, err := a.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := a.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	var data []AmendAlgoOrder
	if err := json.Unmarshal(apiResponse.Data, &data); err != nil {
		return nil, err
	}
	return data, nil
}
