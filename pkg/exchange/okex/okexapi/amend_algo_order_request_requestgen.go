// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Data -url /api/v5/trade/amend-algos -type AmendAlgoOrderRequest -responseType .AmendAlgoOrderResponse"; DO NOT EDIT.

package okexapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (r *AmendAlgoOrderRequest) InstID(instID string) *AmendAlgoOrderRequest {
	r.instID = instID
	return r
}

func (r *AmendAlgoOrderRequest) AlgoID(algoID string) *AmendAlgoOrderRequest {
	r.algoID = &algoID
	return r
}

func (r *AmendAlgoOrderRequest) AlgoClOrdID(algoClOrdID string) *AmendAlgoOrderRequest {
	r.algoClOrdID = &algoClOrdID
	return r
}

func (r *AmendAlgoOrderRequest) CxlOnFail(cxlOnFail bool) *AmendAlgoOrderRequest {
	r.cxlOnFail = &cxlOnFail
	return r
}

func (r *AmendAlgoOrderRequest) ReqID(reqID string) *AmendAlgoOrderRequest {
	r.reqID = &reqID
	return r
}

func (r *AmendAlgoOrderRequest) NewSz(newSz string) *AmendAlgoOrderRequest {
	r.newSz = &newSz
	return r
}

func (r *AmendAlgoOrderRequest) NewTpTriggerPx(newTpTriggerPx string) *AmendAlgoOrderRequest {
	r.newTpTriggerPx = &newTpTriggerPx
	return r
}

func (r *AmendAlgoOrderRequest) NewTpOrdPx(newTpOrdPx string) *AmendAlgoOrderRequest {
	r.newTpOrdPx = &newTpOrdPx
	return r
}

func (r *AmendAlgoOrderRequest) NewSlTriggerPx(newSlTriggerPx string) *AmendAlgoOrderRequest {
	r.newSlTriggerPx = &newSlTriggerPx
	return r
}

func (r *AmendAlgoOrderRequest) NewSlOrdPx(newSlOrdPx string) *AmendAlgoOrderRequest {
	r.newSlOrdPx = &newSlOrdPx
	return r
}

func (r *AmendAlgoOrderRequest) NewTpTriggerPxType(newTpTriggerPxType string) *AmendAlgoOrderRequest {
	r.newTpTriggerPxType = &newTpTriggerPxType
	return r
}

func (r *AmendAlgoOrderRequest) NewSlTriggerPxType(newSlTriggerPxType string) *AmendAlgoOrderRequest {
	r.newSlTriggerPxType = &newSlTriggerPxType
	return r
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (r *AmendAlgoOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (r *AmendAlgoOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check instID field -> json key instId
	instID := r.instID

	// assign parameter of instID
	params["instId"] = instID
	// check algoID field -> json key algoId
	if r.algoID != nil {
		algoID := *r.algoID

		// assign parameter of algoID
		params["algoId"] = algoID
	} else {
	}
	// check algoClOrdID field -> json key algoClOrdId
	if r.algoClOrdID != nil {
		algoClOrdID := *r.algoClOrdID

		// assign parameter of algoClOrdID
		params["algoClOrdId"] = algoClOrdID
	} else {
	}
	// check cxlOnFail field -> json key cxlOnFail
	if r.cxlOnFail != nil {
		cxlOnFail := *r.cxlOnFail

		// assign parameter of cxlOnFail
		params["cxlOnFail"] = cxlOnFail
	} else {
	}
	// check reqID field -> json key reqId
	if r.reqID != nil {
		reqID := *r.reqID

		// assign parameter of reqID
		params["reqId"] = reqID
	} else {
	}
	// check newSz field -> json key newSz
	if r.newSz != nil {
		newSz := *r.newSz

		// assign parameter of newSz
		params["newSz"] = newSz
	} else {
	}
	// check newTpTriggerPx field -> json key newTpTriggerPx
	if r.newTpTriggerPx != nil {
		newTpTriggerPx := *r.newTpTriggerPx

		// assign parameter of newTpTriggerPx
		params["newTpTriggerPx"] = newTpTriggerPx
	} else {
	}
	// check newTpOrdPx field -> json key newTpOrdPx
	if r.newTpOrdPx != nil {
		newTpOrdPx := *r.newTpOrdPx

		// assign parameter of newTpOrdPx
		params["newTpOrdPx"] = newTpOrdPx
	} else {
	}
	// check newSlTriggerPx field -> json key newSlTriggerPx
	if r.newSlTriggerPx != nil {
		newSlTriggerPx := *r.newSlTriggerPx

		// assign parameter of newSlTriggerPx
		params["newSlTriggerPx"] = newSlTriggerPx
	} else {
	}
	// check newSlOrdPx field -> json key newSlOrdPx
	if r.newSlOrdPx != nil {
		newSlOrdPx := *r.newSlOrdPx

		// assign parameter of newSlOrdPx
		params["newSlOrdPx"] = newSlOrdPx
	} else {
	}
	// check newTpTriggerPxType field -> json key newTpTriggerPxType
	if r.newTpTriggerPxType != nil {
		newTpTriggerPxType := *r.newTpTriggerPxType

		// assign parameter of newTpTriggerPxType
		params["newTpTriggerPxType"] = newTpTriggerPxType
	} else {
	}
	// check newSlTriggerPxType field -> json key newSlTriggerPxType
	if r.newSlTriggerPxType != nil {
		newSlTriggerPxType := *r.newSlTriggerPxType

		// assign parameter of newSlTriggerPxType
		params["newSlTriggerPxType"] = newSlTriggerPxType
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (r *AmendAlgoOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := r.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if r.isVarSlice(_v) {
			r.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (r *AmendAlgoOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := r.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (r *AmendAlgoOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (r *AmendAlgoOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (r *AmendAlgoOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (r *AmendAlgoOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (r *AmendAlgoOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := r.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (r *AmendAlgoOrderRequest) GetPath() string {
	return "/api/v5/trade/amend-algos"
}

// Do generates the request object and send the request object to the API endpoint
func (r *AmendAlgoOrderRequest) Do(ctx context.Context) (*AmendAlgoOrderResponse, error) {

	params, err := r.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = r.GetPath()

	req, err := r.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := r.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse AmendAlgoOrderResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
